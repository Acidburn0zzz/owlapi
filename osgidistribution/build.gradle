
description = 'OWLAPI :: OSGi and Compatibility Distribution'

//apply plugin: 'biz.aQute.bnd.builder'

dependencies {
    compile project(':owlapi-apibinding')
    compile project(':owlapi-tools')
    compile project(':owlapi-impl')
    compile project(':owlapi-parsers')
    compile project(':owlapi-oboformat')
    compile project(':owlapi-rio')
    compile project(':owlapi-api')
    compile project(':owlapi-compatibility')
    compile fileTree(dir: "bundles", include: "*.jar")
    
  compile group: 'org.apache.servicemix.bundles', name: 'org.apache.servicemix.bundles.javax-inject', version: '1_2'
    compile group: 'org.apache.servicemix.bundles', name: 'org.apache.servicemix.bundles.aopalliance', version: '1.0_6'
    testCompile group: 'org.apache.felix', name: 'org.apache.felix.main', version: 'latest.release'
    testCompile group: 'org.osgi', name: 'org.osgi.core', version: 'latest.release'
    testCompile group: 'org.apache.felix', name: 'org.apache.felix.bundlerepository', version: 'latest.release'
    testCompile 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.2.0'

}

apply plugin: 'java'




import aQute.bnd.gradle.Bundle
import aQute.bnd.osgi.Analyzer

task bundle( type: Bundle) {
    dependsOn classes
    configuration=configurations.compile
    manifest {
        attributes('Export-Package': "" +
                "com.clarkparsia.*," +
                "org.semanticweb.owlapi.*;-split-package:=merge-first," +
                "org.semanticweb.owlapitools.*;-split-package:=merge-first," +
                "uk.ac.manchester.*;-split-package:=merge-first," +
                "org.obolibrary.*;-split-package:=merge-first," +
                "org.coode.*;-split-package:=merge-first," +
                "de.uulm.*;-split-package:=merge-first",

                "Import-Package": "com.github.benmanes.*;resolution:=optional,*" ,
                
                "Bundle-SymbolicName": "org.semanticweb.owl.owlapi"
                
        )
    }
}
test {
    File bundleName = new File(temporaryDir,"bundleName")
    PrintStream out = new PrintStream(bundleName)
    out.println(bundle.archivePath)
    def var = configurations.compile.resolvedConfiguration.resolvedArtifacts
    List<aQute.bnd.osgi.Jar> bcp = []
    Set dependentArtifacts = new HashSet()
    var.findAll({ foo -> foo.moduleVersion.id.group != project.group})*.file.each {
        bcp += new aQute.bnd.osgi.Jar(it)
        dependentArtifacts.add(it)
    }
    def bundles = []
    def nonbundles = []
    bcp.each {
        if(it.bsn) {
            bundles += it
        } else {
            nonbundles += it
        }
    }
    dependentArtifacts.each {
        out.println it
    }
    FileTree foo = fileTree(dir: "bundles", include: "*.jar")
     foo.files.each {
         out.println it
     }
    out.close()
}

task wrap(type: OSGIWrap) {
    configuration = project.configurations.compile
    def var = configurations.compile.resolvedConfiguration.resolvedArtifacts
    List<aQute.bnd.osgi.Jar> bcp = []
    Set dependentArtifacts = new HashSet()
    var.findAll({ foo -> foo.moduleVersion.id.group != project.group })*.file.each {
        bcp += new aQute.bnd.osgi.Jar(it)
        dependentArtifacts.add(it)
    }
    def bundles = []
    def nonbundles = []
    bcp.each {
        if (it.bsn) {
            bundles += it
        } else {
            nonbundles += it
        }
    }
}

jar {
    dependsOn bundle
    deleteAllActions()
}

class OSGIWrap extends DefaultTask {
    Configuration configuration = project.configurations.compile
    @OutputDirectory
    File bundleOutputDir = new File(project.buildDir,"wrapped-bundles")
    def walkTree(ResolutionResult foo, Closure f) {
        //println "foo root = ${foo.root.id}"
        depthFirstWalk(foo.root.dependencies, f)
        //println foo.properties

    }

    def depthFirstWalk(Set<DependencyResult> kids, Closure f, int level = 0) {
        if (kids.empty)
            return
        //println("walk level: ${level}")  ${dependencyToFileMap[kid.selected.id]}
        for (DependencyResult kid : kids) {
            //println "${spaces(level)}${kid.selected.id} "
            depthFirstWalk(kid.selected.dependencies, f, level + 1)
            f.call(kid)
        }
        // println "end level ${level}"
    }
    def dependencyToFileMap = [:]
    def dependencyToJarMap = [:]
    def bundles = []
    HashSet seen = []

    private void buildDependencyToFileMap() {
        configuration.resolvedConfiguration.resolvedArtifacts.each {
            dependencyToFileMap[it.id.componentIdentifier] = it.file
            def jar = new aQute.bnd.osgi.Jar(it.file)
            dependencyToJarMap[it.id.componentIdentifier] = jar

        }
    }

    @TaskAction
    wrap() {
        println "in wrap"
        buildDependencyToFileMap()
        walkTree(configuration.incoming.resolutionResult,
                {
                    DependencyResult dep ->
                        if (dep.selected.id instanceof ProjectComponentIdentifier)
                            return
                        if(!seen.add(dep.selected.id)) {
                            return
                        } 
                        def jar = dependencyToJarMap[dep.selected.id]
                        if (!jar.bsn) {
                            //println dep.selected.properties
                            wrapOneJar(dep, jar)
                            bundles += jar
                        } else {
                            println "jar is already a bundle (${jar.bsn})"
                            bundles += jar
                        }
                })
    }

    void wrapOneJar(DependencyResult dep, aQute.bnd.osgi.Jar toWrap) {
        Analyzer analyzer = new Analyzer()
        analyzer.setClasspath(bundles)
        analyzer.setJar(toWrap)
        def depId = dep.selected.id
        analyzer.setBundleSymbolicName("${depId.group}.${depId.module}")
        analyzer.bundleVersion = depId.version
        analyzer.exportPackage = "*;version=\"${depId.version}\""
        analyzer.importPackage = "*"
        analyzer.calculateExportsFromContents(toWrap)
        analyzer.analyze()
        toWrap.manifest =  analyzer.calcManifest()
        println toWrap.manifest.properties
        analyzer.save(new File(bundleOutputDir,"${depId.group}.${depId.module}-${depId.version}.jar"),true)
    }

    static spaces(int count) {
        StringBuilder buf = new StringBuilder()
        while (count--) {
            buf.append("  ")
        }
        return buf.toString()
    }

}
